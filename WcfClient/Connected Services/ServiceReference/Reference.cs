//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfClient.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CarService", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class CarService : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Car", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Car : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YearField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Brand {
            get {
                return this.BrandField;
            }
            set {
                if ((object.ReferenceEquals(this.BrandField, value) != true)) {
                    this.BrandField = value;
                    this.RaisePropertyChanged("Brand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Year {
            get {
                return this.YearField;
            }
            set {
                if ((this.YearField.Equals(value) != true)) {
                    this.YearField = value;
                    this.RaisePropertyChanged("Year");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class ServiceData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllCarServices", ReplyAction="http://tempuri.org/IService/GetAllCarServicesResponse")]
        WcfClient.ServiceReference.CarService[] GetAllCarServices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllCarServices", ReplyAction="http://tempuri.org/IService/GetAllCarServicesResponse")]
        System.Threading.Tasks.Task<WcfClient.ServiceReference.CarService[]> GetAllCarServicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertCarService", ReplyAction="http://tempuri.org/IService/InsertCarServiceResponse")]
        void InsertCarService(string Name, string Description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertCarService", ReplyAction="http://tempuri.org/IService/InsertCarServiceResponse")]
        System.Threading.Tasks.Task InsertCarServiceAsync(string Name, string Description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertServiceToCS", ReplyAction="http://tempuri.org/IService/InsertServiceToCSResponse")]
        void InsertServiceToCS(string CarService, string Service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertServiceToCS", ReplyAction="http://tempuri.org/IService/InsertServiceToCSResponse")]
        System.Threading.Tasks.Task InsertServiceToCSAsync(string CarService, string Service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteCarService", ReplyAction="http://tempuri.org/IService/DeleteCarServiceResponse")]
        void DeleteCarService(string CarService);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteCarService", ReplyAction="http://tempuri.org/IService/DeleteCarServiceResponse")]
        System.Threading.Tasks.Task DeleteCarServiceAsync(string CarService);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllCars", ReplyAction="http://tempuri.org/IService/GetAllCarsResponse")]
        WcfClient.ServiceReference.Car[] GetAllCars();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllCars", ReplyAction="http://tempuri.org/IService/GetAllCarsResponse")]
        System.Threading.Tasks.Task<WcfClient.ServiceReference.Car[]> GetAllCarsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertCar", ReplyAction="http://tempuri.org/IService/InsertCarResponse")]
        void InsertCar(WcfClient.ServiceReference.Car car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertCar", ReplyAction="http://tempuri.org/IService/InsertCarResponse")]
        System.Threading.Tasks.Task InsertCarAsync(WcfClient.ServiceReference.Car car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteCar", ReplyAction="http://tempuri.org/IService/DeleteCarResponse")]
        void DeleteCar(string Car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteCar", ReplyAction="http://tempuri.org/IService/DeleteCarResponse")]
        System.Threading.Tasks.Task DeleteCarAsync(string Car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetServiceData", ReplyAction="http://tempuri.org/IService/GetServiceDataResponse")]
        WcfClient.ServiceReference.ServiceData[] GetServiceData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetServiceData", ReplyAction="http://tempuri.org/IService/GetServiceDataResponse")]
        System.Threading.Tasks.Task<WcfClient.ServiceReference.ServiceData[]> GetServiceDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertService", ReplyAction="http://tempuri.org/IService/InsertServiceResponse")]
        void InsertService(string Name, string Description, double Price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertService", ReplyAction="http://tempuri.org/IService/InsertServiceResponse")]
        System.Threading.Tasks.Task InsertServiceAsync(string Name, string Description, double Price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteService", ReplyAction="http://tempuri.org/IService/DeleteServiceResponse")]
        void DeleteService(string Service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteService", ReplyAction="http://tempuri.org/IService/DeleteServiceResponse")]
        System.Threading.Tasks.Task DeleteServiceAsync(string Service);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : WcfClient.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<WcfClient.ServiceReference.IService>, WcfClient.ServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WcfClient.ServiceReference.CarService[] GetAllCarServices() {
            return base.Channel.GetAllCarServices();
        }
        
        public System.Threading.Tasks.Task<WcfClient.ServiceReference.CarService[]> GetAllCarServicesAsync() {
            return base.Channel.GetAllCarServicesAsync();
        }
        
        public void InsertCarService(string Name, string Description) {
            base.Channel.InsertCarService(Name, Description);
        }
        
        public System.Threading.Tasks.Task InsertCarServiceAsync(string Name, string Description) {
            return base.Channel.InsertCarServiceAsync(Name, Description);
        }
        
        public void InsertServiceToCS(string CarService, string Service) {
            base.Channel.InsertServiceToCS(CarService, Service);
        }
        
        public System.Threading.Tasks.Task InsertServiceToCSAsync(string CarService, string Service) {
            return base.Channel.InsertServiceToCSAsync(CarService, Service);
        }
        
        public void DeleteCarService(string CarService) {
            base.Channel.DeleteCarService(CarService);
        }
        
        public System.Threading.Tasks.Task DeleteCarServiceAsync(string CarService) {
            return base.Channel.DeleteCarServiceAsync(CarService);
        }
        
        public WcfClient.ServiceReference.Car[] GetAllCars() {
            return base.Channel.GetAllCars();
        }
        
        public System.Threading.Tasks.Task<WcfClient.ServiceReference.Car[]> GetAllCarsAsync() {
            return base.Channel.GetAllCarsAsync();
        }
        
        public void InsertCar(WcfClient.ServiceReference.Car car) {
            base.Channel.InsertCar(car);
        }
        
        public System.Threading.Tasks.Task InsertCarAsync(WcfClient.ServiceReference.Car car) {
            return base.Channel.InsertCarAsync(car);
        }
        
        public void DeleteCar(string Car) {
            base.Channel.DeleteCar(Car);
        }
        
        public System.Threading.Tasks.Task DeleteCarAsync(string Car) {
            return base.Channel.DeleteCarAsync(Car);
        }
        
        public WcfClient.ServiceReference.ServiceData[] GetServiceData() {
            return base.Channel.GetServiceData();
        }
        
        public System.Threading.Tasks.Task<WcfClient.ServiceReference.ServiceData[]> GetServiceDataAsync() {
            return base.Channel.GetServiceDataAsync();
        }
        
        public void InsertService(string Name, string Description, double Price) {
            base.Channel.InsertService(Name, Description, Price);
        }
        
        public System.Threading.Tasks.Task InsertServiceAsync(string Name, string Description, double Price) {
            return base.Channel.InsertServiceAsync(Name, Description, Price);
        }
        
        public void DeleteService(string Service) {
            base.Channel.DeleteService(Service);
        }
        
        public System.Threading.Tasks.Task DeleteServiceAsync(string Service) {
            return base.Channel.DeleteServiceAsync(Service);
        }
    }
}
